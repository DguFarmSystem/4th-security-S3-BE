name: CI/CD Deploy Spring Boot JAR to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest .

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제
            sudo docker rm -f spring-app || true
            
            # DockerHub에서 최신 이미지 pull
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
            
            # (필요시) application.yml 파일 생성
            echo "${{ secrets.APPLICATION_YML }}" > ~/application.yml
            
            # 새 컨테이너 실행 (application.yml 경로/포트 등 맞게 수정)
            sudo docker run -d \
              --name spring-app \
              -p 8080:8080 \
              -v ~/application.yml:/app/application.yml \
              ${{ secrets.DOCKER_USERNAME }}/spring-app:latest